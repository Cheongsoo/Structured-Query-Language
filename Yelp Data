Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

i. Attribute table = 10,000
ii. Business table = 10,000
iii. Category table = 10,000
iv. Checkin table = 10,000
v. elite_years table = 10,000
vi. friend table = 10,000
vii. hours table = 10,000
viii. photo table = 10,000
ix. review table = 10,000
x. tip table = 10,000
xi. user table = 10,000



2. Find the total number of distinct records for the primary keys in each of the tables listed below:

i. 	Business =	10000 - id
ii. 	Hours =	1562 - business_id
iii. 	Category =	2643  -  business_id
iv. 	Attribute =	1115 - business_id
v. 	Review = 10000	- id,	8090 - business_id, 9581 - user_id
vi. 	Checkin = 493 - business_id
vii. 	Photo =	10000 - id,	6493 - business_id
viii. 	Tip = 	537	- user_id,3979 - business_id
ix. 	User = 	10000 - id
x. 	Friend = 	11	- user_id
xi. 	Elite_years = 2780	- user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No


	SQL code used to arrive at answer:
	SELECT id, name, review_count, yelping_since, useful, funny, cool, fans, average_stars,
			   compliment_hot, compliment_more, compliment_profile, compliment_cute, compliment_list,
			   compliment_note, compliment_plain, compliment_cool, compliment_funny, compliment_writer, compliment_photos
		FROM  user
		WHERE 	id is null
				or name is null
				or review_count is null
				or yelping_since is null
				or useful is null
				or funny is null
				or cool is null
				or fans is null
				or average_stars is null
				or compliment_hot is null
				or compliment_more is null
				or compliment_profile is null
				or compliment_cute is null
				or compliment_list is null
				or compliment_note is null
				or compliment_plain is null
				or compliment_cool is null
				or compliment_funny is null
				or compliment_writer is null
				or compliment_photos is null




4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars

		min: 1		max: 5		avg: 3.7082

	ii. Table: Business, Column: Stars

		min: 1.0	max: 5.0	avg: 3.6549

	iii. Table: Tip, Column: Likes

		min: 0		max: 2		avg: 0.0144

	iv. Table: Checkin, Column: Count

		min: 1		max: 53		avg: 1.9414

	v. Table: User, Column: Review_count

		min: 0		max: 2000	avg: 24.2995



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

		SELECT city, sum(review_count)
		FROM business
		GROUP BY city
		ORDER BY sum(review_count) DESC

	Copy and Paste the Result Below:

	+------------------+--------+
| city             | Review |
+------------------+--------+
| Blainville       |      3 |
| Bolton           |      3 |
| Braddock         |      3 |
| Brooklin         |      3 |
| Brooklyn Heights |      3 |
| Dallas           |      3 |
| East Gwillimbury |      3 |
| Firth of Forth   |      3 |
| Fort McDowell    |      3 |
| Glenshaw         |      3 |
| Gormley          |      3 |
| Haddington       |      3 |
| Ingliston        |      3 |
| Kahnawake        |      3 |
| Kennedy Township |      3 |
| King             |      3 |
| Kirtland         |      3 |
| L'ile-Bizard     |      3 |
| McFarland        |      3 |
| Middleburg Hts   |      3 |
| Monticello       |      3 |
| Möglingen        |      3 |
| Nellis AFB       |      3 |
| Neuhausen        |      3 |
| North Randall    |      3 |
+------------------+--------+


6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
			SELECT stars AS "Star Rating", count(stars) AS "Count"
			FROM business
			WHERE city = 'Avon'
			GROUPBY "Star Rating"


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| Star Rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+


ii. Beachwood

SQL code used to arrive at answer:
			SELECT stars AS "Star Rating", count(stars) AS "Count"
			FROM business
			WHERE city = 'Beachwood'
			GROUPBY "Star Rating"

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| Star Rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+


7. Find the top 3 users based on their total number of reviews:

	SQL code used to arrive at answer:
		SELECT name, review_count
		FROM user
		ORDER BY review_count DESC
		LIMIT 3

	Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?
		They're not correlated each other

	Please explain your findings and interpretation of the results:
	As you can see the result, review and fans are not going along with each other.

		SELECT name, review_count, fans
		FROM user
		ORDER BY fans DESC

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+


9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: love


	SQL code used to arrive at answer:

SELECT (SELECT COUNT(text)
        FROM review
        WHERE text like "%love%") AS Love,

		(SELECT COUNT(text)
        FROM review
        WHERE text like "%hate%") AS Hate


+------+------+
| Love | Hate |
+------+------+
| 1780 |  232 |
+------+------+

10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
		SELECT name, fans
		FROM user
		ORDER BY fans DESC
		LIMIT 10


	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+


11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship

	SQL code used to arrive at answer:
		SELECT name, fans, useful, funny
		FROM user
		ORDER BY fans DESC, useful DESC, funny DESC
		limit 10

	Copy and Paste the Result Below:
+-----------+------+--------+--------+
| name      | fans | useful |  funny |
+-----------+------+--------+--------+
| Amy       |  503 |   3226 |   2554 |
| Mimi      |  497 |    257 |    138 |
| Harald    |  311 | 122921 | 122419 |
| Gerald    |  253 |  17524 |   2324 |
| Christine |  173 |   4834 |   6646 |
| Lisa      |  159 |     48 |     13 |
| Cat       |  133 |   1062 |    672 |
| William   |  126 |   9363 |   9361 |
| Fran      |  124 |   9851 |   7606 |
| Lissa     |  120 |    455 |    150 |
+-----------+------+--------+--------+

	Please explain your findings and interpretation of the results:

	As you can see the result, there is not strong relationship
	between having a high number of fans and being listed as "useful" or "funny"
	I would say they're low relationship because Amy has more fans than rest, but William
	or Fran has more useful and funny being listed.
	




Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, There seems to be more hours on the business with 4-5 starts than business with 2-3 stars

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, the sum of review_count for 4-5 starts has more number of reviews than 2-3 stars.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Maybe, the postal_code indicates each restaurant located at different place, the businesses with 4-5 stats may have well localized food than business 2-3 stars.
SQL code used for analysis:

SELECT B.name, B.stars, B.review_count, B.is_open,C.category, B.postal_code,
H.hours
FROM  (business B INNER JOIN category C ON B.id = C.business_id)
INNER JOIN hours H ON B.id = H.business_id
WHERE (B.city = 'Toronto'AND C.category = 'Restaurants')
AND
(B.stars BETWEEN 2 AND 3 OR B.stars BETWEEN 4 AND 5)
GROUP BY stars
ORDER BY H.hours DESC

+---------------+-------+--------------+---------+-------------+-------------+----------------------+
| name          | stars | review_count | is_open | category    | postal_code | hours                |
+---------------+-------+--------------+---------+-------------+-------------+----------------------+
| Edulis        |   4.0 |           89 |       1 | Restaurants | M5V         | Saturday|18:00-23:00 |
| 99 Cent Sushi |   2.0 |            5 |       0 | Restaurants | M5B 2E5     | Saturday|11:00-23:00 |
| Sushi Osaka   |   4.5 |            8 |       1 | Restaurants | M9A 1C2     | Saturday|11:00-23:00 |
| Pizzaiolo     |   3.0 |           34 |       1 | Restaurants | M5H 1X6     | Saturday|10:00-4:00  |
+---------------+-------+--------------+---------+-------------+-------------+----------------------+

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

i. Difference 1:
         There's a huge difference between the number of closed and open businesses.
ii. Difference 2:

         the number of reviews between closed and open is significantly different.

SQL code used for analysis:

SELECT is_open,count(is_open),sum(review_count)
FROM business
GROUP BY is_open

+---------+----------------+-------------------+
| is_open | count(is_open) | sum(review_count) |
+---------+----------------+-------------------+
|       0 |           1520 |             35261 |
|       1 |           8480 |            269300 |
+---------+----------------+-------------------+

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:

i. Indicate the type of analysis you chose to do:
  Is there any relationship between number of review_count and useful along with stars?

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
  I will need to join the useful table and review table in order to see if there is any association between review_count and useful either
	positively or negatively. If there's relationship between them, it will provide a good information when it comes to choose something such as restaurants or shopping centers.

iii. Output of your finished dataset:
    There seems to be a positive relationship between review_count and the number of useful, however, it does not indicate stars.

iv. Provide the SQL code you used to create your final dataset:
SELECT U.name, U.review_count, U.useful,
R.stars
FROM user U INNER JOIN review R on U.id = R.user_id
ORDER BY U.useful ASC
+-----------+--------------+--------+-------+
| name      | review_count | useful | stars |
+-----------+--------------+--------+-------+
| Tonia     |            1 |      0 |     1 |
| Amy       |           35 |      0 |     5 |
| Laura     |            3 |      0 |     5 |
| Rachel    |           31 |      0 |     5 |
| Ed        |            7 |      0 |     1 |
| Ryan      |            7 |      0 |     5 |
| Meg       |            2 |      0 |     5 |
| Lynn      |           17 |      0 |     1 |
| Kelli     |           12 |      0 |     5 |
| Shari     |            1 |      0 |     5 |
| Nikky     |           10 |      0 |     1 |
| Shelly    |            9 |      0 |     4 |
| Nancy     |            1 |      0 |     5 |
| Dana      |            1 |      0 |     2 |
| P         |            4 |      0 |     5 |
| Elyse     |           31 |      0 |     4 |
| Shannon   |           43 |      0 |     4 |
| Amy       |            7 |      0 |     4 |
| A'Starra  |            9 |      1 |     4 |
| soragamii |           26 |      1 |     3 |
| Cassandra |           15 |      1 |     5 |
| Frank     |           15 |      1 |     4 |
| Jesse     |           12 |      1 |     5 |
| L         |           26 |      1 |     5 |
| Still     |           27 |      1 |     4 |
+-----------+--------------+--------+-------+

SELECT U.name, U.review_count, U.useful,
R.stars
FROM user U INNER JOIN review R on U.id = R.user_id
ORDER BY U.useful DESC
+------------+--------------+--------+-------+
| name       | review_count | useful | stars |
+------------+--------------+--------+-------+
| W          |          198 |   6974 |     5 |
| Dottsy     |          196 |   2654 |     3 |
| Annie      |          279 |   1402 |     2 |
| Nieves     |          178 |   1091 |     4 |
| Jean       |          259 |    748 |     5 |
| Christophe |           90 |    371 |     5 |
| LA         |           92 |    199 |     5 |
| Alaina     |           44 |    154 |     4 |
| Ed         |          904 |    141 |     2 |
| Kyle       |          240 |    129 |     1 |
| AJA        |          257 |     75 |     4 |
| Andrea     |          174 |     72 |     4 |
| Pinky      |          449 |     43 |     5 |
| Jarrod     |           67 |     38 |     4 |
| Danny      |          564 |     38 |     4 |
| Mark       |          418 |     38 |     5 |
| Ed         |            8 |     37 |     3 |
| Kaitlan    |          235 |     30 |     3 |
| Kaitlan    |          235 |     30 |     4 |
| Dixie      |          503 |     21 |     4 |
| Jade       |          109 |     21 |     4 |
| Sanaz      |           71 |     17 |     2 |
| Just       |           62 |     17 |     4 |
| Christina  |           86 |     16 |     5 |
| Christina  |           86 |     16 |     5 |
+------------+--------------+--------+-------+
